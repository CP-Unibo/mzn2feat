predicate all_different(array [int] of var int: x);
array [1..3] of int: X_INTRODUCED_10 = [1,1,1];
var 1..9: X_INTRODUCED_0;
var 1..9: X_INTRODUCED_1;
var 1..9: X_INTRODUCED_2;
var 1..9: X_INTRODUCED_3;
var 1..9: X_INTRODUCED_4;
var 1..9: X_INTRODUCED_5;
var 1..9: X_INTRODUCED_6;
var 1..9: X_INTRODUCED_7;
var 1..9: X_INTRODUCED_8;
array [1..9] of var int: a:: output_array([1..3,1..3]) = [X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_4,X_INTRODUCED_5,X_INTRODUCED_6,X_INTRODUCED_7,X_INTRODUCED_8];
constraint all_different([X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_4,X_INTRODUCED_5,X_INTRODUCED_6,X_INTRODUCED_7,X_INTRODUCED_8]);
constraint int_lin_eq(X_INTRODUCED_10,[X_INTRODUCED_0,X_INTRODUCED_3,X_INTRODUCED_6],15);
constraint int_lin_eq(X_INTRODUCED_10,[X_INTRODUCED_1,X_INTRODUCED_4,X_INTRODUCED_7],15);
constraint int_lin_eq(X_INTRODUCED_10,[X_INTRODUCED_2,X_INTRODUCED_5,X_INTRODUCED_8],15);
constraint int_lin_eq(X_INTRODUCED_10,[X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2],15);
constraint int_lin_eq(X_INTRODUCED_10,[X_INTRODUCED_3,X_INTRODUCED_4,X_INTRODUCED_5],15);
constraint int_lin_eq(X_INTRODUCED_10,[X_INTRODUCED_6,X_INTRODUCED_7,X_INTRODUCED_8],15);
constraint int_lin_eq(X_INTRODUCED_10,[X_INTRODUCED_0,X_INTRODUCED_4,X_INTRODUCED_8],15);
constraint int_lin_eq(X_INTRODUCED_10,[X_INTRODUCED_2,X_INTRODUCED_4,X_INTRODUCED_6],15);
solve  satisfy;
