array [1..2] of float: capacity = [20.0, 40.0];
array [1..6] of float: consumption = [0.5, 0.2, 0.4, 0.4, 0.3, 0.6];
array [1..3] of float: demand = [100.0, 200.0, 300.0];
array [1..3] of float: insideCost = [0.6, 0.8, 0.3];
array [1..3] of float: outsideCost = [0.8, 0.9, 0.4];
var float: FLOAT____00001 :: is_defined_var :: var_is_introduced;
var -1.7976931348623157e+308..20.0: FLOAT____00002 :: is_defined_var :: var_is_introduced;
var -1.7976931348623157e+308..40.0: FLOAT____00003 :: is_defined_var :: var_is_introduced;
var 100.0..1.7976931348623157e+308: FLOAT____00004 :: is_defined_var :: var_is_introduced;
var 200.0..1.7976931348623157e+308: FLOAT____00005 :: is_defined_var :: var_is_introduced;
var 300.0..1.7976931348623157e+308: FLOAT____00006 :: is_defined_var :: var_is_introduced;
var float: cost :: output_var = FLOAT____00001;
array [1..3] of var float: inside :: output_array([1..3]);
array [1..3] of var float: outside :: output_array([1..3]);
constraint float_le(0.0, inside[1]);
constraint float_le(0.0, inside[2]);
constraint float_le(0.0, inside[3]);
constraint float_le(0.0, outside[1]);
constraint float_le(0.0, outside[2]);
constraint float_le(0.0, outside[3]);
constraint float_lin_eq([-1.0, 0.2, 0.4, 0.6], [FLOAT____00003, inside[1], inside[2], inside[3]], 0.0) :: defines_var(FLOAT____00003);
constraint float_lin_eq([-1.0, 0.5, 0.4, 0.3], [FLOAT____00002, inside[1], inside[2], inside[3]], 0.0) :: defines_var(FLOAT____00002);
constraint float_lin_eq([-1.0, 0.6, 0.8, 0.3, 0.8, 0.9, 0.4], [FLOAT____00001, inside[1], inside[2], inside[3], outside[1], outside[2], outside[3]], 0.0) :: defines_var(FLOAT____00001);
constraint float_plus(inside[1], outside[1], FLOAT____00004) :: defines_var(FLOAT____00004);
constraint float_plus(inside[2], outside[2], FLOAT____00005) :: defines_var(FLOAT____00005);
constraint float_plus(inside[3], outside[3], FLOAT____00006) :: defines_var(FLOAT____00006);
solve minimize FLOAT____00001;
