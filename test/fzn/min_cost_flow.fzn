array [1..20] of int: arcs = [1, 2, 1, 3, 1, 4, 1, 5, 2, 3, 2, 4, 2, 5, 3, 4, 3, 5, 4, 5];
array [1..10] of float: capacity = [6.0, 4.0, 4.0, 4.0, 3.0, 3.0, 3.0, 3.0, 3.0, 4.0];
array [1..10] of float: capacity_lb = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
array [1..10] of float: costs = [10.0, 6.0, 10.0, 20.0, 2.0, 4.0, 10.0, 2.0, 10.0, 2.0];
array [1..5] of float: demand = [-10.0, 0.0, 0.0, 0.0, 10.0];
var float: FLOAT____00006 :: is_defined_var :: var_is_introduced;
array [1..10] of var float: X :: output_array([1..10]);
constraint float_le(0.0, X[1]);
constraint float_le(0.0, X[2]);
constraint float_le(0.0, X[3]);
constraint float_le(0.0, X[4]);
constraint float_le(0.0, X[5]);
constraint float_le(0.0, X[6]);
constraint float_le(0.0, X[7]);
constraint float_le(0.0, X[8]);
constraint float_le(0.0, X[9]);
constraint float_le(0.0, X[10]);
constraint float_le(X[1], 6.0);
constraint float_le(X[2], 4.0);
constraint float_le(X[3], 4.0);
constraint float_le(X[4], 4.0);
constraint float_le(X[5], 3.0);
constraint float_le(X[6], 3.0);
constraint float_le(X[7], 3.0);
constraint float_le(X[8], 3.0);
constraint float_le(X[9], 3.0);
constraint float_le(X[10], 4.0);
constraint float_lin_eq([-1.0, -1.0, -1.0, -1.0, -1.0], [-10.0, X[1], X[2], X[3], X[4]], 0.0);
constraint float_lin_eq([-1.0, 1.0, -1.0, -1.0, -1.0], [0.0, X[1], X[5], X[6], X[7]], 0.0);
constraint float_lin_eq([-1.0, 1.0, 1.0, -1.0, -1.0], [0.0, X[2], X[5], X[8], X[9]], 0.0);
constraint float_lin_eq([-1.0, 1.0, 1.0, 1.0, -1.0], [0.0, X[3], X[6], X[8], X[10]], 0.0);
constraint float_lin_eq([-1.0, 1.0, 1.0, 1.0, 1.0], [10.0, X[4], X[7], X[9], X[10]], 0.0);
constraint float_lin_eq([-1.0, 10.0, 6.0, 10.0, 20.0, 2.0, 4.0, 10.0, 2.0, 10.0, 2.0], [FLOAT____00006, X[1], X[2], X[3], X[4], X[5], X[6], X[7], X[8], X[9], X[10]], 0.0) :: defines_var(FLOAT____00006);
solve minimize FLOAT____00006;
