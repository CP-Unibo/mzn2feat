var bool: X_INTRODUCED_0;
var bool: X_INTRODUCED_1;
var bool: X_INTRODUCED_2;
var bool: X_INTRODUCED_3 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_4 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_5 ::var_is_introduced :: is_defined_var;
array [1..3] of var bool: assignment:: output_array([1..3]) = [X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2];
constraint array_bool_or([X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2],true);
constraint array_bool_or([X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_3],true);
constraint array_bool_or([X_INTRODUCED_0,X_INTRODUCED_2,X_INTRODUCED_4],true);
constraint array_bool_or([X_INTRODUCED_0,X_INTRODUCED_3,X_INTRODUCED_4],true);
constraint array_bool_or([X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_5],true);
constraint array_bool_or([X_INTRODUCED_1,X_INTRODUCED_3,X_INTRODUCED_5],true);
constraint array_bool_or([X_INTRODUCED_2,X_INTRODUCED_4,X_INTRODUCED_5],true);
constraint bool_eq_reif(false,X_INTRODUCED_2,X_INTRODUCED_3):: defines_var(X_INTRODUCED_3);
constraint bool_eq_reif(false,X_INTRODUCED_1,X_INTRODUCED_4):: defines_var(X_INTRODUCED_4);
constraint bool_eq_reif(false,X_INTRODUCED_0,X_INTRODUCED_5):: defines_var(X_INTRODUCED_5);
solve  satisfy;
