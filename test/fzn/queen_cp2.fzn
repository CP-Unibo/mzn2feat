predicate alldifferent(array [int] of var int: x);
var 1..8: X_INTRODUCED_0;
var 1..8: X_INTRODUCED_1;
var 1..8: X_INTRODUCED_2;
var 1..8: X_INTRODUCED_3;
var 1..8: X_INTRODUCED_4;
var 1..8: X_INTRODUCED_5;
var 1..8: X_INTRODUCED_6;
var 1..8: X_INTRODUCED_7;
var 8..15: X_INTRODUCED_9 ::var_is_introduced :: is_defined_var;
var 7..14: X_INTRODUCED_10 ::var_is_introduced :: is_defined_var;
var 6..13: X_INTRODUCED_11 ::var_is_introduced :: is_defined_var;
var 5..12: X_INTRODUCED_12 ::var_is_introduced :: is_defined_var;
var 4..11: X_INTRODUCED_13 ::var_is_introduced :: is_defined_var;
var 3..10: X_INTRODUCED_14 ::var_is_introduced :: is_defined_var;
var 2..9: X_INTRODUCED_15 ::var_is_introduced :: is_defined_var;
var 2..9: X_INTRODUCED_16 ::var_is_introduced :: is_defined_var;
var 3..10: X_INTRODUCED_17 ::var_is_introduced :: is_defined_var;
var 4..11: X_INTRODUCED_18 ::var_is_introduced :: is_defined_var;
var 5..12: X_INTRODUCED_19 ::var_is_introduced :: is_defined_var;
var 6..13: X_INTRODUCED_20 ::var_is_introduced :: is_defined_var;
var 7..14: X_INTRODUCED_21 ::var_is_introduced :: is_defined_var;
var 8..15: X_INTRODUCED_22 ::var_is_introduced :: is_defined_var;
array [1..8] of var int: q:: output_array([1..8]) = [X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_4,X_INTRODUCED_5,X_INTRODUCED_6,X_INTRODUCED_7];
constraint alldifferent([X_INTRODUCED_9,X_INTRODUCED_10,X_INTRODUCED_11,X_INTRODUCED_12,X_INTRODUCED_13,X_INTRODUCED_14,X_INTRODUCED_15,X_INTRODUCED_7]);
constraint alldifferent([X_INTRODUCED_0,X_INTRODUCED_16,X_INTRODUCED_17,X_INTRODUCED_18,X_INTRODUCED_19,X_INTRODUCED_20,X_INTRODUCED_21,X_INTRODUCED_22]);
constraint alldifferent(q);
constraint int_lin_eq([1,-1],[X_INTRODUCED_0,X_INTRODUCED_9],-7):: defines_var(X_INTRODUCED_9);
constraint int_lin_eq([1,-1],[X_INTRODUCED_1,X_INTRODUCED_10],-6):: defines_var(X_INTRODUCED_10);
constraint int_lin_eq([1,-1],[X_INTRODUCED_2,X_INTRODUCED_11],-5):: defines_var(X_INTRODUCED_11);
constraint int_lin_eq([1,-1],[X_INTRODUCED_3,X_INTRODUCED_12],-4):: defines_var(X_INTRODUCED_12);
constraint int_lin_eq([1,-1],[X_INTRODUCED_4,X_INTRODUCED_13],-3):: defines_var(X_INTRODUCED_13);
constraint int_lin_eq([1,-1],[X_INTRODUCED_5,X_INTRODUCED_14],-2):: defines_var(X_INTRODUCED_14);
constraint int_lin_eq([1,-1],[X_INTRODUCED_6,X_INTRODUCED_15],-1):: defines_var(X_INTRODUCED_15);
constraint int_lin_eq([1,-1],[X_INTRODUCED_1,X_INTRODUCED_16],-1):: defines_var(X_INTRODUCED_16);
constraint int_lin_eq([1,-1],[X_INTRODUCED_2,X_INTRODUCED_17],-2):: defines_var(X_INTRODUCED_17);
constraint int_lin_eq([1,-1],[X_INTRODUCED_3,X_INTRODUCED_18],-3):: defines_var(X_INTRODUCED_18);
constraint int_lin_eq([1,-1],[X_INTRODUCED_4,X_INTRODUCED_19],-4):: defines_var(X_INTRODUCED_19);
constraint int_lin_eq([1,-1],[X_INTRODUCED_5,X_INTRODUCED_20],-5):: defines_var(X_INTRODUCED_20);
constraint int_lin_eq([1,-1],[X_INTRODUCED_6,X_INTRODUCED_21],-6):: defines_var(X_INTRODUCED_21);
constraint int_lin_eq([1,-1],[X_INTRODUCED_7,X_INTRODUCED_22],-7):: defines_var(X_INTRODUCED_22);
solve :: int_search(q,first_fail,indomain_min,complete) satisfy;
