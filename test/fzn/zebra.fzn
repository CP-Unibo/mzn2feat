predicate alldifferent(array [int] of var int: x);
array [1..2] of int: X_INTRODUCED_27 = [1,-1];
var 1..5: X_INTRODUCED_5;
var 2..5: X_INTRODUCED_6:: is_defined_var;
var 1..5: X_INTRODUCED_7;
var 1..5: X_INTRODUCED_8;
var 1..5: X_INTRODUCED_9;
var 1..5: X_INTRODUCED_10;
var 1..5: X_INTRODUCED_11;
var 1..5: X_INTRODUCED_12;
var 1..5: X_INTRODUCED_13;
var 1..5: X_INTRODUCED_14;
var 1..5: X_INTRODUCED_16;
var 1..5: X_INTRODUCED_18;
var 1..5: X_INTRODUCED_19;
var 1..5: X_INTRODUCED_22;
var 1..5: X_INTRODUCED_24;
var bool: X_INTRODUCED_28 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_30 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_32 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_34 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_36 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_38 ::var_is_introduced :: is_defined_var;
array [1..5] of var int: nation:: output_array([0..4]) = [X_INTRODUCED_5,X_INTRODUCED_10,X_INTRODUCED_16,1,X_INTRODUCED_24];
array [1..5] of var int: colour:: output_array([0..4]) = [X_INTRODUCED_5,X_INTRODUCED_6,X_INTRODUCED_7,X_INTRODUCED_8,X_INTRODUCED_9];
array [1..5] of var int: animal:: output_array([0..4]) = [X_INTRODUCED_10,X_INTRODUCED_11,X_INTRODUCED_12,X_INTRODUCED_13,X_INTRODUCED_14];
array [1..5] of var int: drink:: output_array([0..4]) = [X_INTRODUCED_6,X_INTRODUCED_16,3,X_INTRODUCED_18,X_INTRODUCED_19];
array [1..5] of var int: smoke:: output_array([0..4]) = [X_INTRODUCED_14,X_INTRODUCED_8,X_INTRODUCED_22,X_INTRODUCED_18,X_INTRODUCED_24];
constraint array_bool_or([X_INTRODUCED_28,X_INTRODUCED_30],true);
constraint array_bool_or([X_INTRODUCED_32,X_INTRODUCED_34],true);
constraint array_bool_or([X_INTRODUCED_36,X_INTRODUCED_38],true);
constraint int_lin_eq(X_INTRODUCED_27,[X_INTRODUCED_6,X_INTRODUCED_7],1):: defines_var(X_INTRODUCED_6);
constraint alldifferent(smoke);
constraint alldifferent(drink);
constraint alldifferent(animal);
constraint alldifferent(colour);
constraint alldifferent(nation);
constraint int_lin_eq_reif([1],[X_INTRODUCED_9],2,X_INTRODUCED_28):: defines_var(X_INTRODUCED_28);
constraint int_lin_eq_reif([-1],[X_INTRODUCED_9],0,X_INTRODUCED_30):: defines_var(X_INTRODUCED_30);
constraint int_lin_eq_reif(X_INTRODUCED_27,[X_INTRODUCED_12,X_INTRODUCED_8],1,X_INTRODUCED_32):: defines_var(X_INTRODUCED_32);
constraint int_lin_eq_reif(X_INTRODUCED_27,[X_INTRODUCED_8,X_INTRODUCED_12],1,X_INTRODUCED_34):: defines_var(X_INTRODUCED_34);
constraint int_lin_eq_reif(X_INTRODUCED_27,[X_INTRODUCED_11,X_INTRODUCED_22],1,X_INTRODUCED_36):: defines_var(X_INTRODUCED_36);
constraint int_lin_eq_reif(X_INTRODUCED_27,[X_INTRODUCED_22,X_INTRODUCED_11],1,X_INTRODUCED_38):: defines_var(X_INTRODUCED_38);
solve  satisfy;
