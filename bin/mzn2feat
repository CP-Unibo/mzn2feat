#!/usr/bin/env python
"""
mzn2feat - a features extractor for (not only) MiniZinc models.

Usage: mzn2feat [OPTIONS] -i <MODEL>

Options:
  -h, --help
    Print this message.
  -p, --print-id
    Print a comma-separated list of all the features identifiers.
  -P, --print-all
    Print all the features identifiers and a brief description for each
    identifier.
  -k, --keep
    Keep all the auxiliary models generated by mzn2feat.
  -i <MODEL>
    Input model. Supported formats: .xcsp, .mzn, .fzn
  -d <MODEL.dzn>
    Data model (only for a MiniZinc model in input).
  -o <FORMAT>
    Output format. Supported formats:
      csv:  comma-separated list of the features values
      dict: a python-like dictionary which associates to each identifier
            the corresponding value
      pp:   a pretty print of features identifiers, values, and description.
    (Default format: csv)
  -r <FILE>
    Redirect the output to FILE instead of printing to standard output.
"""

import sys
import getopt
import json
import signal
import os
from os import remove
from os.path import splitext, basename
from subprocess import call, Popen
from socket import gethostname
from random import randint

MZN2FEAT_HOME = os.path.realpath(__file__).split('/')[:-2]
MZN2FEAT_HOME = '/'.join(MZN2FEAT_HOME)
IDENT_FILE = MZN2FEAT_HOME + '/fzn2feat/features.id'
DESCR_FILE = MZN2FEAT_HOME + '/fzn2feat/features.descr'
TMP_DIR = MZN2FEAT_HOME + '/tmp'
MZNLIB = MZN2FEAT_HOME + '/mznlib'
TMP_MZN = None
TMP_FZN = None
KEEP = False
PID = None


def handler(signum=None, frame=None):
    """
    Handles termination signals.
    """
    print('*** Signal handler called with signal', signum)
    global PID, TMP_FZN, TMP_MZN
    if PID:
        try:
            os.killpg(PID, signal.SIGKILL)
        except OSError:
            pass
    if not KEEP:
        if TMP_FZN and os.path.exists(TMP_FZN):
            remove(TMP_FZN)
        if TMP_MZN and os.path.exists(TMP_MZN):
            remove(TMP_MZN)
    sys.stdout.flush()
    sys.exit(signum)


for sig in [signal.SIGTERM, signal.SIGINT, signal.SIGHUP, signal.SIGQUIT]:
    signal.signal(sig, handler)


def xcsp2mzn(xcsp_file):
    """
    Converts an XCSP model to MiniZinc.
    """
    global PID, KEEP, MZNLIB, TMP_MZN
    TMP_MZN = TMP_DIR + '/' + gethostname() + '_' + str(os.getpid()) + '.mzn'
    cmd = 'xcsp2mzn ' + xcsp_file
    proc = Popen(cmd.split(), stdout=open(TMP_MZN, 'w'))
    PID = proc.pid
    proc.communicate()
    if proc.returncode != 0:
        sys.stderr.write('*** Error while converting XCSP ---> MZN\n')
        if not KEEP and TMP_MZN and os.path.exists(TMP_MZN):
            remove(TMP_MZN)
        sys.exit(proc.returncode)


def mzn2fzn(mzn_file, dzn_file):
    """
    Converts a MiniZinc model to FlatZinc, keeping all the global constraints.
    """
    global KEEP, MZNLIB, TMP_FZN, TMP_MZN
    TMP_FZN = TMP_DIR + '/' + gethostname() + '_' + str(os.getpid()) + '.fzn'
    cmd = 'mzn2fzn --no-output-ozn -I ' + MZNLIB + ' ' \
          + mzn_file + ' ' + dzn_file + ' -o ' + TMP_FZN
    proc = Popen(cmd.split())
    PID = proc.pid
    proc.communicate()
    if proc.returncode != 0:
        sys.stderr.write('*** Error while converting MZN ---> DZN\n')
        if not KEEP:
            if TMP_FZN and os.path.exists(TMP_FZN):
                remove(TMP_FZN)
            if TMP_MZN and os.path.exists(TMP_MZN):
                remove(TMP_MZN)
        sys.exit(proc.returncode)


def fzn2feat(fzn_file, output, redirect):
    """
    Extracts features from a FlatZinc model.
    """
    global PID, KEEP, TMP_FZN, TMP_MZN
    cmd = 'fzn2feat ' + fzn_file + ' ' + output
    if redirect:
        out = open(redirect, 'w')
    else:
        out = None
    proc = Popen(cmd.split(), stdout=out)
    PID = proc.pid
    proc.communicate()
    if not KEEP:
        if TMP_FZN and os.path.exists(TMP_FZN):
            remove(TMP_FZN)
        if TMP_MZN and os.path.exists(TMP_MZN):
            remove(TMP_MZN)
    if proc.returncode != 0:
        sys.stderr.write('*** Error while extracting features\n')
        sys.exit(proc.returncode)


def main(args):
    global KEEP, TMP_FZN, TMP_MZN
    try:
        opts, args = getopt.getopt(
            args, 'hpPki:d:o:r:', ['help', 'print-id', 'print-all', 'keep']
        )
    except getopt.error as msg:
        print(msg)
        print('For help use --help')
        sys.exit(2)
    out = 'csv'
    dzn = ''
    mzn = ''
    fzn = ''
    ext = ''
    red = ''
    if not opts:
        print('No input model given (option -i). For help use --help')
        sys.exit(2)
    for o, a in opts:
        if o in ('-h', '--help'):
            print(__doc__)
            return
        elif o in ('-p', '--print-id'):
            with open(IDENT_FILE, 'r') as infile:
                for line in infile:
                    print(line)
            return
        elif o in ('-P', '--print-all'):
            with open(DESCR_FILE, 'r') as infile:
                for line in infile:
                    print(line)
            return
        elif o in ('-k', '--keep'):
            global KEEP
            KEEP = True
        elif o in ('-o'):
            if a not in ('csv', 'dict', 'pp'):
                print('Not supported output format ' + a + '. For help use --help')
                sys.exit(2)
            else:
                out = a
        elif o in ('-i'):
            ext = splitext(a)[1]
            if ext not in ('.xml', '.fzn', '.mzn'):
                print('Not supported input format ' + a + '. For help use --help')
                sys.exit(2)
            if ext == '.xml':
                xcsp2mzn(a)
                global TMP_MZN
                mzn = TMP_MZN
            elif ext == '.fzn':
                fzn = a
            else:
                mzn = a

        elif o in ('-d'):
            dzn = a
        elif o in ('-r'):
            red = a

    if ext != '.fzn':
        mzn2fzn(mzn, dzn)
        global TMP_FZN
        fzn = TMP_FZN

    fzn2feat(fzn, out, red)


if __name__ == '__main__':
    main(sys.argv[1:])
